# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2021-06-03 17:35
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django_extensions.db.fields
import jsonfield.fields


class Migration(migrations.Migration):

    dependencies = [
        ("locations", "0028_offline_replica_space"),
    ]

    operations = [
        migrations.AlterField(
            model_name="callback",
            name="event",
            field=models.CharField(
                choices=[
                    ("post_store", "Post-store AIP (source files)"),
                    ("post_store_aip", "Post-store AIP"),
                    ("post_store_aic", "Post-store AIC"),
                    ("post_store_dip", "Post-store DIP"),
                ],
                help_text="Type of event when this callback should be executed.",
                max_length=15,
                verbose_name="Event",
            ),
        ),
        migrations.AlterField(
            model_name="callback",
            name="method",
            field=models.CharField(
                choices=[
                    ("delete", "DELETE"),
                    ("get", "GET"),
                    ("head", "HEAD"),
                    ("options", "OPTIONS"),
                    ("patch", "PATCH"),
                    ("post", "POST"),
                    ("put", "PUT"),
                ],
                help_text="HTTP request method to use in connecting to the URL.",
                max_length=10,
                verbose_name="Method",
            ),
        ),
        migrations.AlterField(
            model_name="dspace",
            name="archive_format",
            field=models.CharField(
                choices=[("ZIP", "ZIP"), ("7Z", "7z")],
                default="ZIP",
                max_length=3,
                verbose_name="Archive format",
            ),
        ),
        migrations.AlterField(
            model_name="dspace",
            name="metadata_policy",
            field=jsonfield.fields.JSONField(
                blank=True,
                default=[],
                help_text='Policy for restricted access metadata policy. Must be specified as a list of objects in JSON. This will override existing policies. Example: [{"action":"READ","groupId":"5","rpType":"TYPE_CUSTOM"}]',
                null=True,
                verbose_name="Restricted metadata policy",
            ),
        ),
        migrations.AlterField(
            model_name="dspace",
            name="sd_iri",
            field=models.URLField(
                help_text="URL of the service document. E.g. http://demo.dspace.org/swordv2/servicedocument",
                max_length=256,
                verbose_name="Service Document IRI",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="event_type",
            field=models.CharField(
                choices=[("DELETE", "delete"), ("RECOVER", "recover")], max_length=8
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="status",
            field=models.CharField(
                choices=[
                    ("SUBMIT", "Submitted"),
                    ("APPROVE", "Approved"),
                    ("REJECT", "Rejected"),
                ],
                max_length=8,
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="accessionid",
            field=models.TextField(
                blank=True, help_text="Accession ID of originating transfer"
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="origin",
            field=django_extensions.db.fields.UUIDField(
                blank=True,
                editable=False,
                help_text="Unique identifier of originating Archivematica dashboard",
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="source_package",
            field=models.TextField(
                blank=True, help_text="Unique identifier of originating unit"
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="gpg",
            name="key",
            field=models.CharField(
                help_text="The GnuPG private key that will be able to decrypt packages stored in this space.",
                max_length=256,
                verbose_name="GnuPG Private Key",
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="purpose",
            field=models.CharField(
                choices=[
                    ("AR", "AIP Recovery"),
                    ("AS", "AIP Storage"),
                    ("CP", "Currently Processing"),
                    ("DS", "DIP Storage"),
                    ("SD", "FEDORA Deposits"),
                    ("SS", "Storage Service Internal Processing"),
                    ("BL", "Transfer Backlog"),
                    ("TS", "Transfer Source"),
                    ("RP", "Replicator"),
                ],
                help_text="Purpose of the space.  Eg. AIP storage, Transfer source",
                max_length=2,
                verbose_name="Purpose",
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="au_size",
            field=models.BigIntegerField(
                blank=True,
                help_text="Size in bytes of an Allocation Unit",
                null=True,
                verbose_name="AU Size",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="checksum_type",
            field=models.CharField(
                blank=True,
                help_text="Checksum type to send to LOCKSS-o-matic for verification.  Eg. md5, sha1, sha256",
                max_length=64,
                null=True,
                verbose_name="Checksum type",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="collection_iri",
            field=models.CharField(
                blank=True,
                help_text="URL to post the packages to, eg. http://lockssomatic.example.org/api/sword/2.0/col-iri/12",
                max_length=256,
                null=True,
                verbose_name="Collection IRI",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="content_provider_id",
            field=models.CharField(
                help_text="On-Behalf-Of value when communicating with LOCKSS-o-matic",
                max_length=32,
                verbose_name="Content Provider ID",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="external_domain",
            field=models.URLField(
                help_text="Base URL for this server that LOCKSS will be able to access.  Probably the URL for the home page of the Storage Service.",
                verbose_name="Externally available domain",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="keep_local",
            field=models.BooleanField(
                default=True,
                help_text="If checked, keep a local copy even after the AIP is stored in the LOCKSS network.",
                verbose_name="Keep local copy?",
            ),
        ),
        migrations.AlterField(
            model_name="lockssomatic",
            name="sd_iri",
            field=models.URLField(
                help_text="URL of LOCKSS-o-matic service document IRI, eg. http://lockssomatic.example.org/api/sword/2.0/sd-iri",
                max_length=256,
                verbose_name="Service Document IRI",
            ),
        ),
        migrations.AlterField(
            model_name="nfs",
            name="version",
            field=models.CharField(
                default="nfs4",
                help_text="Type of the filesystem, i.e. nfs, or nfs4.         Should match a command in `mount`.",
                max_length=64,
                verbose_name="Version",
            ),
        ),
        migrations.AlterField(
            model_name="package",
            name="description",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Human-readable description.",
                max_length=256,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="package",
            name="misc_attributes",
            field=jsonfield.fields.JSONField(
                blank=True,
                default={},
                help_text="For storing flexible, often Space-specific, attributes",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="package",
            name="package_type",
            field=models.CharField(
                choices=[
                    ("AIP", "AIP"),
                    ("AIC", "AIC"),
                    ("SIP", "SIP"),
                    ("DIP", "DIP"),
                    ("transfer", "Transfer"),
                    ("file", "Single File"),
                    ("deposit", "FEDORA Deposit"),
                ],
                max_length=8,
            ),
        ),
        migrations.AlterField(
            model_name="package",
            name="status",
            field=models.CharField(
                choices=[
                    ("PENDING", "Upload Pending"),
                    ("STAGING", "Staged on Storage Service"),
                    ("UPLOADED", "Uploaded"),
                    ("VERIFIED", "Verified"),
                    ("FAIL", "Failed"),
                    ("DEL_REQ", "Delete requested"),
                    ("DELETED", "Deleted"),
                    ("FINALIZE", "Deposit Finalized"),
                    ("MOVING", "Moving"),
                    ("RECOVER_REQ", "Recover requested"),
                ],
                default="FAIL",
                help_text="Status of the package in the storage service.",
                max_length=11,
            ),
        ),
        migrations.AlterField(
            model_name="package",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="packagedownloadtask",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="packagedownloadtaskfile",
            name="completed",
            field=models.BooleanField(
                default=False, help_text="True if file downloaded successfully."
            ),
        ),
        migrations.AlterField(
            model_name="packagedownloadtaskfile",
            name="failed",
            field=models.BooleanField(
                default=False, help_text="True if file failed to download."
            ),
        ),
        migrations.AlterField(
            model_name="packagedownloadtaskfile",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="pipeline",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                auto=False,
                help_text="Identifier for the Archivematica pipeline",
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}",
                        "Needs to be format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where x is a hexadecimal digit.",
                        "Invalid UUID",
                    )
                ],
                verbose_name="UUID",
            ),
        ),
        migrations.AlterField(
            model_name="space",
            name="access_protocol",
            field=models.CharField(
                choices=[
                    ("ARKIVUM", "Arkivum"),
                    ("DV", "Dataverse"),
                    ("DC", "DuraCloud"),
                    ("DSPACE", "DSpace via SWORD2 API"),
                    ("DSPC_RST", "DSpace via REST API"),
                    ("FEDORA", "FEDORA via SWORD2"),
                    ("GPG", "GPG encryption on Local Filesystem"),
                    ("FS", "Local Filesystem"),
                    ("LOM", "LOCKSS-o-matic"),
                    ("NFS", "NFS"),
                    ("REPLICA", "Write-Only Replica Staging on Local Filesystem"),
                    ("PIPE_FS", "Pipeline Local Filesystem"),
                    ("SWIFT", "Swift"),
                    ("S3", "S3"),
                ],
                help_text="How the space can be accessed.",
                max_length=8,
                verbose_name="Access protocol",
            ),
        ),
        migrations.AlterField(
            model_name="space",
            name="path",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Absolute path to the space on the storage service machine.",
                verbose_name="Path",
            ),
        ),
        migrations.AlterField(
            model_name="space",
            name="uuid",
            field=django_extensions.db.fields.UUIDField(
                blank=True, editable=False, help_text="Unique identifier", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="swift",
            name="auth_version",
            field=models.CharField(
                default="2",
                help_text="OpenStack auth version",
                max_length=8,
                verbose_name="Auth version",
            ),
        ),
    ]
